CREATE TABLE Config (
    configID SERIAL PRIMARY KEY,
    styles VARCHAR(100),
    colorTheme VARCHAR(255),
    mainColor VARCHAR(255),
    sideBarPosition CHAR(5)
);

CREATE TABLE BlackList (
    blackListID SERIAL PRIMARY KEY,
    bPath VARCHAR(255)
);

CREATE TABLE Media (
    mediaID SERIAL PRIMARY KEY,
    coverPath VARCHAR(512),
    mediaType VARCHAR(50)
);

CREATE TABLE Profile (
    profileID SERIAL PRIMARY KEY,
    profileName VARCHAR(255) UNIQUE,
    configID INT,
    createdAt TIMESTAMP,
    updatedAt TIMESTAMP,
    photoID INT,
    FOREIGN KEY (photoID) REFERENCES Media(mediaID),
    FOREIGN KEY (configID) REFERENCES Config(configID)
);

CREATE TABLE Artists (
    artistID SERIAL PRIMARY KEY,
    artistName VARCHAR(255) UNIQUE,
    photoID INT,
    bio TEXT,
    createdAt TIMESTAMP,
    updatedAt TIMESTAMP,
    FOREIGN KEY (photoID) REFERENCES Media(mediaID)
);

CREATE TABLE Albums (
    albumID SERIAL PRIMARY KEY,
    title VARCHAR(255),
    artistID INT,
    releaseDate DATE,
    discNumber INT,
    trackCounter INT,
    coverID INT,
    createdAt TIMESTAMP,
    updatedAt TIMESTAMP,
    FOREIGN KEY (artistID) REFERENCES Artists(artistID),
    FOREIGN KEY (coverID) REFERENCES Media(mediaID)
);

CREATE TABLE Tracks (
    trackID SERIAL PRIMARY KEY,
    title VARCHAR(255),
    albumID INT,
    duration TIME,
    releaseDate DATE,
    trackNumber INT,
    filePath VARCHAR(255),
    lyrics TEXT,
    bitRate INT,
    fileSize INT,
    fileType VARCHAR(10),
    createdAt TIMESTAMP,
    updatedAt TIMESTAMP,
    playCount INT,
    coverID INT,
    FOREIGN KEY (albumID) REFERENCES Albums(albumID),
    FOREIGN KEY (coverID) REFERENCES Media(mediaID)
);

CREATE TABLE Playlists (
    playlistID SERIAL PRIMARY KEY,
    profileID INT,
    title VARCHAR(255) UNIQUE,
    createdAt TIMESTAMP,
    updatedAt TIMESTAMP,
    FOREIGN KEY (profileID) REFERENCES Profile(profileID)
);

CREATE TABLE Likes (
    likeID SERIAL PRIMARY KEY,
    profileID INT,
    trackID INT,
    FOREIGN KEY (profileID) REFERENCES Profile(profileID),
    FOREIGN KEY (trackID) REFERENCES Tracks(trackID)
);

CREATE TABLE Directories (
    dirID SERIAL PRIMARY KEY,
    dirPath VARCHAR(1000) UNIQUE
);

CREATE TABLE Genre (
    genreID SERIAL PRIMARY KEY,
    genreName VARCHAR(255) UNIQUE
);

CREATE TABLE UserActivity (
    userActivityID SERIAL PRIMARY KEY,
    trackID INT,
    profileID INT,
    activityTime TIMESTAMP,
    activityType VARCHAR(50),
    FOREIGN KEY (profileID) REFERENCES Profile(profileID),
    FOREIGN KEY (trackID) REFERENCES Tracks(trackID)
);

CREATE TABLE TrackArtist (
    trackID INT,
    artistID INT,
    PRIMARY KEY (trackID, artistID),
    FOREIGN KEY (trackID) REFERENCES Tracks(trackID),
    FOREIGN KEY (artistID) REFERENCES Artists(artistID)
);

CREATE TABLE TrackGenre (
    trackID INT,
    genreID INT,
    PRIMARY KEY (trackID, genreID),
    FOREIGN KEY (trackID) REFERENCES Tracks(trackID),
    FOREIGN KEY (genreID) REFERENCES Genre(genreID)
);

CREATE TABLE PlaylistTracks (
    playlistID INT,
    profileID INT,
    trackID INT,
    trackOrder INT,
    PRIMARY KEY (playlistID, profileID),
    FOREIGN KEY (playlistID) REFERENCES Playlists(playlistID),
    FOREIGN KEY (profileID) REFERENCES Profile(profileID),
    FOREIGN KEY (trackID) REFERENCES Tracks(trackID)
);

CREATE TABLE BlackListProfile (
    blackListID INT,
    profileID INT,
    PRIMARY KEY (blackListID, profileID),
    FOREIGN KEY (profileID) REFERENCES Profile(profileID),
    FOREIGN KEY (blackListID) REFERENCES BlackList(blackListID)
);

-- Code below deletes all tables but maintain the database itself
-- DROP SCHEMA public CASCADE;
-- CREATE SCHEMA public;

================================================================================================================================

using Npgsql;

string connectionString = "Host=myserver;Username=mylogin;Password=mypass;Database=mydatabase";

using (var connection = new NpgsqlConnection(connectionString))
{
    connection.Open();

    var createConfigTable = @"CREATE TABLE Config (
        configID SERIAL PRIMARY KEY,
        style VARCHAR(100),
        colorTheme VARCHAR(255),
        mainColor VARCHAR(255),
        sideBarPosition CHAR(5)
    )";
    using (var command = new NpgsqlCommand(createConfigTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createBlackListTable = @"CREATE TABLE BlackList (
        blackListID SERIAL PRIMARY KEY,
        path VARCHAR(255)
    )";
    using (var command = new NpgsqlCommand(createBlackListTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createMediaTable = @"CREATE TABLE Media (
        mediaID SERIAL PRIMARY KEY,
        filePath VARCHAR(512),
        mediaType VARCHAR(50)
    )";
    using (var command = new NpgsqlCommand(createMediaTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createProfileTable = @"CREATE TABLE Profile (
        profileID SERIAL PRIMARY KEY,
        profileName VARCHAR(255) UNIQUE,
        configID INT,
        createdAt TIMESTAMP,
        updatedAt TIMESTAMP,
        photoID INT,
        FOREIGN KEY (photoID) REFERENCES Media(mediaID),
        FOREIGN KEY (configID) REFERENCES Config(configID)
    )";
    using (var command = new NpgsqlCommand(createProfileTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createArtistTable = @"CREATE TABLE Artist (
        artistID SERIAL PRIMARY KEY,
        name VARCHAR(255) UNIQUE,
        photoID INT,
        bio TEXT,
        createdAt TIMESTAMP,
        updatedAt TIMESTAMP,
        FOREIGN KEY (photoID) REFERENCES Media(mediaID)
    )";
    using (var command = new NpgsqlCommand(createArtistTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createAlbumTable = @"CREATE TABLE Album (
        albumID SERIAL PRIMARY KEY,
        title VARCHAR(255),
        artistID INT,
        releaseDate DATE,
        discNumber INT,
        trackCounter INT,
        coverID INT,
        createdAt TIMESTAMP,
        updatedAt TIMESTAMP,
        FOREIGN KEY (artistID) REFERENCES Artist(artistID),
        FOREIGN KEY (coverID) REFERENCES Media(mediaID)
    )";
    using (var command = new NpgsqlCommand(createAlbumTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createTrackTable = @"CREATE TABLE Track (
        trackID SERIAL PRIMARY KEY,
        title VARCHAR(255),
        albumID INT,
        duration TIME,
        releaseDate DATE,
        trackNumber INT,
        filePath VARCHAR(255),
        lyrics TEXT,
        bitRate INT,
        fileSize INT,
        fileType VARCHAR(10),
        createdAt TIMESTAMP,
        updatedAt TIMESTAMP,
        playCount INT,
        coverID INT,
        FOREIGN KEY (albumID) REFERENCES Album(albumID),
        FOREIGN KEY (coverID) REFERENCES Media(mediaID)
    )";
    using (var command = new NpgsqlCommand(createTrackTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createPlaylistTable = @"CREATE TABLE Playlist (
        playlistID SERIAL PRIMARY KEY,
        profileID INT,
        title VARCHAR(255) UNIQUE,
        createdAt TIMESTAMP,
        updatedAt TIMESTAMP,
        FOREIGN KEY (profileID) REFERENCES Profile(profileID)
    )";
    using (var command = new NpgsqlCommand(createPlaylistTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createLikeTable = @"CREATE TABLE Like (
        likeID SERIAL PRIMARY KEY,
        profileID INT,
        trackID INT,
        FOREIGN KEY (profileID) REFERENCES Profile(profileID),
        FOREIGN KEY (trackID) REFERENCES Track(trackID)
    )";
    using (var command = new NpgsqlCommand(createLikeTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createDirectoriesTable = @"CREATE TABLE Directories (
        dirID SERIAL PRIMARY KEY,
        dirPath VARCHAR(1000) UNIQUE
    )";
    using (var command = new NpgsqlCommand(createDirectoriesTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createGenreTable = @"CREATE TABLE Genre (
        genreID SERIAL PRIMARY KEY,
        name VARCHAR(255)
    )";
    using (var command = new NpgsqlCommand(createGenreTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createUserActivityTable = @"CREATE TABLE UserActivity (
        userActivityID SERIAL PRIMARY KEY,
        trackID INT,
        profileID INT,
        activityTime TIMESTAMP,
        activityType VARCHAR(50),
        FOREIGN KEY (profileID) REFERENCES Profile(profileID),
        FOREIGN KEY (trackID) REFERENCES Track(trackID)
    )";
    using (var command = new NpgsqlCommand(createUserActivityTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createTrackArtistTable = @"CREATE TABLE TrackArtist (
        trackID INT,
        artistID INT,
        PRIMARY KEY (trackID, artistID),
        FOREIGN KEY (trackID) REFERENCES Track(trackID),
        FOREIGN KEY (artistID) REFERENCES Artist(artistID)
    )";
    using (var command = new NpgsqlCommand(createTrackArtistTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createTrackGenreTable = @"CREATE TABLE TrackGenre (
        trackID INT,
        genreID INT,
        PRIMARY KEY (trackID, genreID),
        FOREIGN KEY (trackID) REFERENCES Track(trackID),
        FOREIGN KEY (genreID) REFERENCES Genre(genreID)
    )";
    using (var command = new NpgsqlCommand(createTrackGenreTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createPlaylistTracksTable = @"CREATE TABLE PlaylistTracks (
        playlistID INT,
        profileID INT,
        trackID INT,
        trackOrder INT,
        PRIMARY KEY (playlistID, profileID),
        FOREIGN KEY (playlistID) REFERENCES Playlist(playlistID),
        FOREIGN KEY (profileID) REFERENCES Profile(profileID),
        FOREIGN KEY (trackID) REFERENCES Track(trackID)
    )";
    using (var command = new NpgsqlCommand(createPlaylistTracksTable, connection))
    {
        command.ExecuteNonQuery();
    }

    var createBlackListProfileTable = @"CREATE TABLE BlackListProfile (
        blackListID INT,
        profileID INT,
        PRIMARY KEY (blackListID, profileID),
        FOREIGN KEY (profileID) REFERENCES Profile(profileID),
        FOREIGN KEY (blackListID) REFERENCES BlackList(blackListID)
    )";
    using (var command = new NpgsqlCommand(createBlackListProfileTable, connection))
    {
        command.ExecuteNonQuery();
    }
}



-- Code below deletes all tables but maintain the database itself
-- DROP SCHEMA public CASCADE;
-- CREATE SCHEMA public;





Changes

Track model class is now: Tracks
Artist table name is now: artistName
genre table name is now: genreName
config table style is now: styles
blacklist table path is now: bPath